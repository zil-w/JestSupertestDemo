{"version":3,"sources":["components/Button.js","components/Blog.js","services/blogs.js","reducers/reducers.js","components/BlogDisplay.js","components/LoginForm.js","components/BlogSubForm.js","components/SystemMessage.js","components/Toggle.js","services/users.js","components/Users.js","components/User.js","components/BlogView.js","components/NavMenu.js","App.js","reducers/store.js","index.js"],"names":["Button","name","action","onClick","Blog","blog","blogUpdate","blogDelete","loggedInName","useState","show","setShow","showWhenShown","display","addLike","a","newBlog","likes","deleteBlog","window","confirm","id","className","style","paddingTop","paddingLeft","border","borderWidth","marginBottom","to","title","author","url","user","getAll","axios","get","response","data","authenticateUser","username","password","post","loginRes","submitBlog","token","headers","blogSubRes","updateBlog","updatedBlog","put","updateBlogRes","blogID","delete","msgActions","type","blogActions","blogs","dispatch","blogService","deletedBlog","userActions","usersActions","users","reducers","notificationReducer","state","message","isError","blogReducer","concat","map","filter","userReducer","usersReducer","BlogDisplay","likesComparator","firstBlog","secondBlog","useSelector","sort","useDispatch","useEffect","setInitialBlogs","localStorage","getItem","blogsToDisplay","key","LoginForm","loginHandler","setUsername","setPassword","onSubmit","value","onChange","event","target","BlogSubForm","formSubHandler","blogTitle","setBlogTitle","blogURL","setBlogURL","blogOwner","setBlogOwner","submitForm","preventDefault","htmlFor","SystemMessage","msgState","notification","color","width","Toggle","React","forwardRef","props","ref","toggled","setToggled","showButtonVisibility","hideButtonVisibility","toggleVisibility","useImperativeHandle","showButtonName","hideButtonName","children","displayName","getUsers","userList","console","log","Users","receivedUsers","setInitialUsers","length","pathname","userInfo","User","useParams","BlogView","likeHandler","deleteHandler","NavMenu","logoutHandler","backgroundColor","App","setBlogs","loggedIn","setLoggedIn","userState","toggleRef","useRef","history","useHistory","showSuccessMsg","sysMsg","showFailMsg","resetSysMsg","timeout","setTimeout","authResult","setItem","error","removeItem","push","blogSubHandler","subSuccess","addedBlog","current","blogUpdateHandler","submittedUpdate","blogDeleteHandler","path","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9b38674.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({ name, action }) => {\r\n  return(\r\n    <button onClick={action}>{name}</button>\r\n  )\r\n}\r\n\r\nexport default Button","import React, { useState } from 'react'\r\nimport Button from './Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Blog = ({ blog, blogUpdate, blogDelete, loggedInName }) => {\r\n  const [show, setShow] = useState(false)\r\n  const showWhenShown = { display: (show ? '' : 'none') }\r\n\r\n  const toggleShow = () => {\r\n    setShow(!show)\r\n  }\r\n\r\n  const addLike = async () => {\r\n    const newBlog = { ...blog, likes: blog.likes + 1 }\r\n    await blogUpdate(newBlog)\r\n  }\r\n\r\n  const deleteBlog = async () => {\r\n    const shouldDelete = window.confirm('Would you like to delete this blog?')\r\n    if (shouldDelete) {\r\n      await blogDelete(blog.id)\r\n    }\r\n  }\r\n\r\n  const blogStyle = { //taken from fullstackopen, https://fullstackopen.com/en/part5/props_children_and_proptypes\r\n    paddingTop: 10,\r\n    paddingLeft: 2,\r\n    border: 'solid',\r\n    borderWidth: 1,\r\n    marginBottom: 5\r\n  }\r\n\r\n  return (\r\n    <div className='blog' style={blogStyle}>\r\n      <Link to={`/blogs/${blog.id}`}> {blog.title} </Link> {blog.author} <Button name={show ? 'Hide' : 'Show'} action={toggleShow} />\r\n      <div className='conditionally_displayed' style={showWhenShown}>\r\n        URL: {blog.url}<br />\r\n        likes: {blog.likes}\r\n        <Button name='like' action={addLike} />\r\n        {blog.user && blog.user.name === loggedInName && <Button name='delete' action={deleteBlog} />}\r\n        {blog.user && <><br />Poster: {blog.user.name}</>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Blog\r\n","import axios from 'axios'//I don't remember how routing worked\r\n//const tempUrl = 'http://localhost:3003'\r\nconst tempUrl = ''\r\nconst baseUrl = '/api/blogs'\r\nconst loginUrl = '/api/'\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(tempUrl + baseUrl)\r\n  return response.data\r\n}\r\n\r\nconst authenticateUser = async (username, password) => {\r\n  const loginRes = await axios.post(tempUrl + loginUrl, { username, password })\r\n  return loginRes.data\r\n}\r\n\r\nconst submitBlog = async (title, url, author, token) => {\r\n  const blogSubRes = await axios.post(tempUrl + baseUrl, { title, url, author }, { headers:{ 'Authorization': `bearer ${token}` } })\r\n  return blogSubRes.data\r\n}\r\n\r\nconst updateBlog = async updatedBlog => {\r\n  delete updatedBlog.user //this property makes mongoose's findByIdAndUpdate method throw a cast error, for objectID, for some reason\r\n  const updateBlogRes = await axios.put(tempUrl + baseUrl + `/${updatedBlog.id}`, updatedBlog)\r\n  return updateBlogRes.data //this wasn't giving me the user property in expected format because I forgot to do .populate in mongoose, so it was just returning the userID instead of the whole object\r\n}\r\n\r\nconst deleteBlog = async blogID => {\r\n  const updateBlogRes = await axios.delete(tempUrl + baseUrl + `/${blogID}`)\r\n  return updateBlogRes.data\r\n}\r\n\r\n\r\n\r\nexport default { getAll, authenticateUser, submitBlog, updateBlog, deleteBlog}","import blogService from '../services/blogs'\r\n\r\nconst usersReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_USERS': {\r\n      return action.data\r\n    }\r\n    case 'RESET_USER': {\r\n      return []\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nconst blogReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_BLOGS': {\r\n      return action.data\r\n    }\r\n    case 'ADD_BLOG': {\r\n      return state.concat(action.data)\r\n    }\r\n    case 'LIKE_BLOG': {\r\n      return state.map(blog => (blog.id === action.data.id) ? action.data : blog)\r\n    }\r\n    case 'DELETE_BLOG': {\r\n      return state.filter(blog => (blog.id !== action.data.id))\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nconst userReducer = (state = '', action) => {//we can probably have loggedIn in here as well\r\n  switch (action.type) {\r\n    case 'SET_USER': {\r\n      return action.data.name\r\n    }\r\n    case 'RESET_USER': {\r\n      return ''\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nconst notificationReducer = (state = { message: '', isError: false }, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SUCCESS': {\r\n      return { message: action.data, isError: false }\r\n    }\r\n    case 'SET_FAILURE': {\r\n      return { message: action.data, isError: true }\r\n    }\r\n    case 'RESET': {\r\n      return { message: '', isError: false }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nconst notifySuccess = data => {\r\n  return {\r\n    type: 'SET_SUCCESS',\r\n    data\r\n  }\r\n}\r\n\r\nconst notifyFailure = data => {\r\n  return {\r\n    type: 'SET_FAILURE',\r\n    data\r\n  }\r\n}\r\n\r\nconst notifyReset = () => {\r\n  return {\r\n    type: 'RESET'\r\n  }\r\n}\r\n\r\nconst initiateBlogs = blogs => {\r\n  return {\r\n    type: 'SET_BLOGS',\r\n    data: blogs\r\n  }\r\n}\r\n\r\nconst setUser = user => {\r\n  return {\r\n    type: 'SET_USER',\r\n    data: user\r\n  }\r\n}\r\n\r\nconst resetUser = () => {\r\n  return {\r\n    type: 'RESET_USER'\r\n  }\r\n}\r\n\r\nconst addBlog = blog => {\r\n  return {\r\n    type: 'ADD_BLOG',\r\n    data: blog\r\n  }\r\n}\r\n\r\nconst likeBlog = blog => {\r\n  return {\r\n    type: 'LIKE_BLOG',\r\n    data: blog\r\n  }\r\n}\r\n\r\nconst deleteBlog = blog => {\r\n  return {\r\n    type: 'DELETE_BLOG',\r\n    data: blog\r\n  }\r\n}\r\n\r\nconst syncLikeBlog = blog => {\r\n  return async dispatch => {\r\n    const updatedBlog = await blogService.updateBlog(blog)\r\n    dispatch({\r\n      type: 'LIKE_BLOG',\r\n      data: updatedBlog\r\n    })\r\n  }\r\n}\r\n\r\nconst syncDeleteBlog = blog => {\r\n  return async dispatch => {\r\n    const deletedBlog = await blogService.deleteBlog(blog.id)\r\n    dispatch({\r\n      type: 'DELETE_BLOG',\r\n      data: deletedBlog\r\n    })\r\n  }\r\n}\r\n\r\nconst setUsers = users => {\r\n  return {\r\n    type: 'SET_USERS',\r\n    data: users\r\n  }\r\n}\r\n\r\nconst resetUsers = users => {\r\n  return {\r\n    type: 'RESET_USERS'\r\n  }\r\n}\r\n\r\nconst reducers = { notificationReducer, blogReducer, userReducer, usersReducer}\r\n\r\nexport const msgActions = { notifySuccess, notifyFailure, notifyReset }\r\nexport const blogActions = {\r\n  initiateBlogs,\r\n  addBlog,\r\n  likeBlog,\r\n  deleteBlog,\r\n  syncDeleteBlog,\r\n  syncLikeBlog\r\n}\r\nexport const userActions = {\r\n  setUser,\r\n  resetUser\r\n}\r\n\r\nexport const usersActions = {\r\n  setUsers,\r\n  resetUsers\r\n}\r\nexport default reducers","import React, {useEffect} from 'react'\r\nimport Blog from './Blog'\r\nimport { blogActions } from '../reducers/reducers'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport blogService from '../services/blogs'\r\n\r\nconst BlogDisplay = ({ blogUpdate, blogDelete }) => {//okay we must display an array of component\r\n\r\n  const likesComparator = (firstBlog, secondBlog) => {//going for descending order\r\n    if(firstBlog.likes > secondBlog.likes){\r\n      return -1\r\n    }\r\n    else if(secondBlog.likes > firstBlog.likes){\r\n      return 1\r\n    }\r\n    else{\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const blogs = useSelector(state => state.blogs.sort(likesComparator))\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    const setInitialBlogs = async () => { //we need to do this because effect hooks are made synchronous to avoid race condition\r\n      const blogs = await blogService.getAll()\r\n      dispatch(blogActions.initiateBlogs(blogs))\r\n    }\r\n\r\n    setInitialBlogs()\r\n  }, [dispatch])\r\n\r\n\r\n  const loggedInName = window.localStorage.getItem('name')\r\n  const blogsToDisplay = blogs.map(blog => <Blog key={blog.id} blog={blog} blogUpdate = {blogUpdate} blogDelete = {blogDelete} loggedInName = {loggedInName}/>)\r\n  return(<>\r\n    <h2>Blogs:</h2>\r\n    <br/>\r\n    {blogsToDisplay}\r\n  </>)\r\n}\r\n\r\nexport default BlogDisplay","import React from 'react'\r\nimport propTypes from 'prop-types'\r\n\r\nconst LoginForm = ({ loginHandler, username, setUsername, password, setPassword }) => {\r\n  return(\r\n    <form onSubmit = {loginHandler} >\r\n            Username: <input type='text' id='username' value = {username} onChange={ event => setUsername(event.target.value)}/>\r\n      <br/>\r\n            Password: <input type='password' id='password' value = {password} onChange={ event => setPassword(event.target.value)}/>\r\n      <button type= 'submit' id='login-button'>Login</button>\r\n      {/* <input type=\"button\" value= \"submit\" onChange = {submitUserInfo}/> */}\r\n    </form>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  loginHandler: propTypes.func.isRequired,\r\n  username: propTypes.string.isRequired,\r\n  setUsername: propTypes.func.isRequired,\r\n  password: propTypes.string.isRequired,\r\n  setPassword: propTypes.func.isRequired\r\n}\r\n\r\nexport default LoginForm","import React, { useState } from 'react'\r\n\r\nconst BlogSubForm = ({ formSubHandler }) => {\r\n  const [blogTitle, setBlogTitle] = useState('')\r\n  const [blogURL, setBlogURL] = useState('')\r\n  const [blogOwner, setBlogOwner] = useState('')\r\n\r\n  const clearBlogInput = () => {\r\n    setBlogTitle('')\r\n    setBlogURL('')\r\n    setBlogOwner('')\r\n  }\r\n\r\n  const submitForm = async event => {\r\n    event.preventDefault()\r\n    const subSuccess = await formSubHandler(blogTitle, blogURL, blogOwner)\r\n    if(subSuccess){\r\n      clearBlogInput()\r\n    }\r\n  }\r\n\r\n\r\n  return(\r\n    <form onSubmit = {submitForm}>\r\n      <label htmlFor=\"Title\">Title:</label>\r\n      <input type='text' id = 'Title' value ={blogTitle} onChange={event => setBlogTitle(event.target.value)}/><br/>\r\n      <label htmlFor=\"Blog_URL\">Blog URL:</label>\r\n      <input type='text' id = 'Blog_URL'  value ={blogURL} onChange={event => setBlogURL(event.target.value)}/><br/>\r\n      <label htmlFor=\"Blog_Author\">BlogAuthor:</label>\r\n      <input type='text' id = 'Blog_Author' value ={blogOwner} onChange={event => setBlogOwner(event.target.value)}/><br/>\r\n      <button type=\"submit\" id= 'Submission_Button'>Add blog</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default BlogSubForm","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst SystemMessage = () => {\r\n  const msgState = useSelector(state => state.notification)\r\n\r\n  const errorStyle = {\r\n    color: 'red',\r\n    width: 500,\r\n    borderWidth: 'thin',\r\n    border: 'solid red'\r\n  }\r\n\r\n  const successStyle = {\r\n    color: 'green',\r\n    width: 500,\r\n    borderWidth: 'thin',\r\n    border: 'solid green'\r\n  }\r\n\r\n  if(msgState.message === ''){//this is probably worse performance than to just do the conditional rendering inside app.js\r\n    return(<></>)\r\n  }\r\n  else{\r\n    return(<p id = 'system-status' style={msgState.isError ? errorStyle : successStyle}>{msgState.message}</p>)\r\n  }\r\n}\r\n\r\nexport default SystemMessage","import React, { useState, useImperativeHandle } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport Button from './Button'\r\n\r\nconst Toggle = React.forwardRef((props, ref) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const showButtonVisibility = { display: (toggled ? 'none' : '') }\r\n  const hideButtonVisibility = { display: (toggled ? '' : 'none') }\r\n\r\n  const toggleVisibility = () => {\r\n    setToggled(!toggled)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {//is return the function as an object obligatory?\r\n    //yeah, it is\r\n    return { toggleVisibility }\r\n  })\r\n\r\n  return(//what would happen if we apply styling to a component from outside of it? let's give it a try\r\n    //well, turns out it does nothing, we have to wrap the component in div's\r\n    <>\r\n      <div style = {showButtonVisibility}>\r\n        <Button name = {props.showButtonName} action = {toggleVisibility}/>\r\n      </div>\r\n      <div style = {hideButtonVisibility}>\r\n        <Button name = {props.hideButtonName} action = {toggleVisibility}/>\r\n        {props.children}\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nToggle.displayName = 'Toggle'\r\n\r\nToggle.propTypes = {\r\n  showButtonName: propTypes.string.isRequired,\r\n  hideButtonName: propTypes.string.isRequired\r\n}\r\n\r\nexport default Toggle","import axios from 'axios'\r\n//const tempUrl = 'http://localhost:3003'\r\nconst tempUrl = ''\r\nconst userUrl = '/api/users'\r\n\r\nconst getUsers = async () => {\r\n    const userList = await axios.get(tempUrl + userUrl)\r\n    console.log('in users service', userList.data)\r\n    return userList.data\r\n}\r\n\r\nexport default getUsers","import React, { useEffect } from 'react'\r\nimport getUsers from '../services/users'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { usersActions } from '../reducers/reducers'\r\n//okay the custom hook is messing this up, let's make it work first\r\n\r\nconst Users = () => {\r\n    const users = useSelector(state => state.users)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const setInitialUsers = async () => {\r\n            const receivedUsers = await getUsers()\r\n            dispatch(usersActions.setUsers(receivedUsers))\r\n        }\r\n\r\n        setInitialUsers()\r\n    }, [dispatch])\r\n\r\n    if (users.length > 0) {\r\n        return (\r\n            <>\r\n                <h1>Users information:</h1>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <b>user</b>\r\n                            </td>\r\n                            <td>\r\n                                <b>blog(s) created</b>\r\n                            </td>\r\n                        </tr>\r\n                        {\r\n                            users.map(user => {\r\n                                return (\r\n                                    <tr key = {user.id}>\r\n                                        <td>\r\n                                            <Link to={{\r\n                                                pathname: `/users/${user.id}`,\r\n                                                state: {\r\n                                                    userInfo: user\r\n                                                }\r\n                                            }}>\r\n                                                {user.name}\r\n                                            </Link>\r\n                                        </td>\r\n                                        <td>\r\n                                            {user.blogs.length}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        return <h1>Waiting </h1>\r\n    }\r\n}\r\n\r\nexport default Users","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst User = () => {\r\n    const id = useParams().id\r\n    const user = useSelector(state => {\r\n        return state.users.filter(user => user.id === id)\r\n    })\r\n\r\n    if (user.length > 0) {\r\n        return (\r\n            <>\r\n            <h1>\r\n                {`This is user: ${user[0].name}`}\r\n            </h1>\r\n            <br />\r\n                His submitted blogs are <br />\r\n                <ul>\r\n                    {user[0].blogs.map(blog => {\r\n                        return (\r\n                            <li>\r\n                                {blog.title}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n    else {//okay refresh fails on this, the redux store doesn't persist on storage, we need to either store to localstorage, use a hot load library, or use something from thunk\r\n        return <h1>Try backstep in your browser...</h1>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default User","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { blogActions } from '../reducers/reducers'\r\nimport Button from './Button'\r\n\r\n//we can maybe use thunk to abstract away the axios call from app.js\r\n\r\n//blog schema\r\n/*\r\ntitle: String,\r\n  author: String,\r\n  url: String,\r\n  likes: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  user: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'User'\r\n  }\r\n*/\r\n\r\n//we need to change the stored user info to store the whole user as well, using just name is filmsy\r\n\r\nconst BlogView = () => {\r\n  const blogID = useParams().id\r\n\r\n  const blog = useSelector(state => {\r\n    return state.blogs.filter(blog => blog.id === blogID)\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const likeHandler = (blog) => {\r\n    //console.log('blog received by handler', blog)\r\n    blog.likes += 1\r\n    //console.log('blog treated by handler', blog)\r\n    dispatch(blogActions.syncLikeBlog(blog))\r\n  }\r\n\r\n  const deleteHandler = (blog) => {\r\n    dispatch(blogActions.syncDeleteBlog(blog))\r\n  }\r\n\r\n  if (blog.length > 0) {\r\n    return (\r\n      <>\r\n        <h1>Blog submission:</h1><br />\r\n        Title: {blog[0].title}<br />\r\n        Author: {blog[0].author}<br />\r\n        URL: {blog[0].url}<br />\r\n        likes: {blog[0].likes}<br />\r\n        <Button name='like' action={()=>likeHandler(blog[0])} />\r\n        {(blog[0].user) &&\r\n          (blog[0].user.name === localStorage.getItem('name')) &&\r\n          <Button name='delete' action={()=>deleteHandler(blog[0])}/>\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  else {\r\n    return <h1>Try backstep in your browser...</h1>\r\n  }\r\n}\r\n\r\nexport default BlogView","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from './Button'\r\n\r\nconst NavMenu = ({ name, logoutHandler }) => {\r\n    return <div style={{ backgroundColor: 'gray' }}>\r\n        <Link to='/'>blogs</Link>\r\n        {' '}\r\n        <Link to='/users'>users</Link>\r\n        {' '}\r\n        Logged in as {name}\r\n        {' '}\r\n        <Button name = 'logout' action = {logoutHandler}/>\r\n    </div>\r\n}\r\n\r\nexport default NavMenu","import React, { useState, useEffect, useRef } from 'react'\r\nimport BlogDisplay from './components/BlogDisplay'\r\nimport blogService from './services/blogs'\r\nimport LoginForm from './components/LoginForm'\r\nimport Button from './components/Button'\r\nimport BlogSubForm from './components/BlogSubForm'\r\nimport SystemMessage from './components/SystemMessage'\r\nimport Toggle from './components/Toggle'\r\nimport Users from './components/Users'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { msgActions, blogActions, userActions } from './reducers/reducers'\r\nimport { Route, useHistory, Switch } from 'react-router-dom'\r\nimport User from './components/User'\r\nimport BlogView from './components/BlogView'\r\nimport NavMenu from './components/NavMenu'\r\n/*\r\nto-do\r\n-add a get user service (done)\r\n-in backend look up the endpoint that returns a list of user (already there)\r\n-add a component that renders all the users (done)\r\n-make the username into links\r\n-add a route in app.js that takes an id after /user/\r\n-look up how to do variable URL and getting a segment of url from the component in note\r\n-make the single User component render a list of names of all their blogs\r\n-make the all users page prettier\r\n*/\r\n\r\nconst App = () => {\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [blogs, setBlogs] = useState([])\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n  // const [sysMsg, setSysMsg] = useState('')\r\n  // const [isError, setIsError] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const msgState = useSelector(state => state.notification)\r\n  const userState = useSelector(state => state.user)\r\n  const toggleRef = useRef()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const setInitialBlogs = async () => { //we need to do this because effect hooks are made synchronous to avoid race condition\r\n      const blogs = await blogService.getAll()\r\n      //blogs.sort(likesComparator)\r\n      setBlogs(blogs)\r\n      if (window.localStorage.getItem('token') !== null && window.localStorage.getItem('name') !== null) {\r\n        setLoggedIn(true)\r\n        //setName(window.localStorage.getItem('name'))\r\n        dispatch(userActions.setUser({ name: window.localStorage.getItem('name') }))\r\n      }\r\n    }\r\n\r\n    setInitialBlogs()\r\n  }, [dispatch])\r\n\r\n  const clearLoginInput = () => {\r\n    setUsername('')\r\n    setPassword('')\r\n  }\r\n\r\n  const showSuccessMsg = (sysMsg) => {\r\n    dispatch(msgActions.notifySuccess(sysMsg))\r\n  }\r\n\r\n  const showFailMsg = (sysMsg) => {\r\n    dispatch(msgActions.notifyFailure(sysMsg))\r\n  }\r\n\r\n  const resetSysMsg = timeout => {\r\n    setTimeout(() => dispatch(msgActions.notifyReset()), timeout)\r\n  }\r\n\r\n  const loginHandler = async event => {//we need to have some type of error handling here\r\n    event.preventDefault()//this is important!\r\n    try {\r\n      const authResult = await blogService.authenticateUser(username, password)\r\n\r\n      if (authResult.token) {\r\n        window.localStorage.setItem('token', authResult.token)\r\n        window.localStorage.setItem('name', authResult.name)\r\n        setLoggedIn(true)\r\n        //setName(authResult.name)\r\n        dispatch(userActions.setUser(authResult))\r\n        clearLoginInput()\r\n        showSuccessMsg('Successfully logged in.')\r\n      }\r\n      else {\r\n        showFailMsg('Authentication failed.')\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log('detecting error', error)\r\n      showFailMsg(`Something went wrong: ${error.response.data.error}`)\r\n    }\r\n    resetSysMsg(3000)\r\n  }\r\n\r\n  const logoutHandler = () => {\r\n    window.localStorage.removeItem('token')\r\n    window.localStorage.removeItem('name')\r\n    setLoggedIn(false)\r\n    //setName('')\r\n    dispatch(userActions.resetUser())\r\n    history.push('/')\r\n  }\r\n\r\n  //actually we don't need this at all because newly submitted blogs have zero like\r\n  // const insertElementAtIndex = (element, index, array) => {//can add spread notation to element to insert many elements\r\n  //   //we can do splice(index, #elements to delete, element) but it mutates the original array\r\n  //   const updatedArray = [\r\n  //     ...array.slice(0, index),\r\n  //     element,\r\n  //     ...array.slice(index)\r\n  //   ]\r\n  // }\r\n\r\n  const blogSubHandler = async (blogTitle, blogURL, blogOwner) => {\r\n    let subSuccess = false\r\n\r\n    try {\r\n      const addedBlog = await blogService.submitBlog(blogTitle, blogURL, blogOwner, window.localStorage.getItem('token'))\r\n      // setBlogs(blogs.concat(addedBlog))\r\n      dispatch(blogActions.addBlog(addedBlog))\r\n      showSuccessMsg('Blog submission successful.')\r\n      toggleRef.current.toggleVisibility()//hide the blog submission form\r\n      subSuccess = true\r\n    }\r\n    catch (error) {\r\n      console.log('blog submission failed', error.response.data.error)\r\n      showFailMsg(error.response.data.error)\r\n    }\r\n    resetSysMsg(3000)\r\n    return subSuccess\r\n  }\r\n\r\n  const blogUpdateHandler = async updatedBlog => {\r\n    try {\r\n      const submittedUpdate = await blogService.updateBlog(updatedBlog)\r\n      //console.log('the update that we have received is', submittedUpdate)\r\n      //const updatedBlogs = blogs.map(blog => (blog.id === submittedUpdate.id) ? submittedUpdate : blog)\r\n      //updatedBlogs.sort(likesComparator) // performance with this might be bad, maybe we can insert the updated blogs by likes and before that/then remove the overwritten blog\r\n      dispatch(blogActions.likeBlog(submittedUpdate))\r\n      //setBlogs(updatedBlogs)\r\n    }\r\n    catch (error) {\r\n      //console.log('failed to update blog:', error)\r\n      showFailMsg(error.response.data.error)\r\n      resetSysMsg(3000)\r\n    }\r\n  }\r\n\r\n  const blogDeleteHandler = async blogID => {\r\n    try {\r\n      const deletedBlog = await blogService.deleteBlog(blogID)\r\n      // const updatedBlogs = []\r\n      // for(const blog of blogs){\r\n      //   if(blog.id !== deletedBlog.id)\r\n      //     updatedBlogs.push(blog)\r\n      // }\r\n      dispatch(blogActions.deleteBlog(deletedBlog))\r\n      //setBlogs(updatedBlogs)\r\n    }\r\n    catch (error) {\r\n      console.log('failed to delete blog:', error)\r\n      showFailMsg(error.response.data.error)\r\n      resetSysMsg(3000)\r\n    }\r\n  }\r\n\r\n  if (userState !== '') {\r\n    return (\r\n      <>\r\n        {msgState.message && <SystemMessage /> /*it seems like this prevents systemMessage's logic getting re-executed on every app re-render*/}\r\n        <NavMenu name={userState} logoutHandler={logoutHandler} />\r\n        <Switch>\r\n          <Route path='/users/:id'>\r\n            <User />\r\n          </Route>\r\n          <Route path='/users'>\r\n            <Users />\r\n          </Route>\r\n          <Route path='/blogs/:id'>\r\n            <BlogView />\r\n          </Route>\r\n          <Route path='/'>\r\n            <div>\r\n              {loggedIn &&\r\n                <div>\r\n                  <h2>Hello {userState}!</h2>\r\n                  <Button name={'log out'} action={logoutHandler} />\r\n                  <Toggle ref={toggleRef} showButtonName='Add Blog' hideButtonName='Cancel'>\r\n                    <BlogSubForm formSubHandler={blogSubHandler} />\r\n                  </Toggle>\r\n                  <BlogDisplay blogs={blogs} blogUpdate={blogUpdateHandler} blogDelete={blogDeleteHandler} />\r\n                </div>\r\n              }\r\n            </div>\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <>\r\n        {msgState.message && <SystemMessage /> /*it seems like this prevents systemMessage's logic getting re-executed on every app re-render*/}\r\n        <Switch>\r\n          <Route path='/'>\r\n            <LoginForm loginHandler={loginHandler} username={username} setUsername={setUsername} password={password} setPassword={setPassword} />\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import { createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport reducers from './reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\n    notification: reducers.notificationReducer,\r\n    blogs: reducers.blogReducer,\r\n    user: reducers.userReducer,\r\n    users: reducers.usersReducer\r\n})\r\n\r\nconst store = createStore(reducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n    )\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport store from './reducers/store'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </Router>\r\n    ,\r\n    document.getElementById('root'))"],"sourceRoot":""}